Pregnancy Agent - Backend Project Specification
Project Goal
Build an AI-powered backend service to support a proactive pregnancy companion agent. The system will guide pregnant users throughout their pregnancy, by tracking medical documents, reminding about important checkups, providing personalized suggestions, and answering questions in Hebrew. The backend will be tested using Swagger and will support multiple users.
Technical Framework

- Backend: FastAPI application
- Containerization: Docker and Docker Compose
- Vector Database: ChromaDB (for document embeddings)
- Storage: MongoDB (for users, documents, logs)
- LLM: Ollama with custom Modelfile
- API Documentation: Swagger/OpenAPI
- Validation: Pydantic for request/response validation

Key Components
1. Docker Infrastructure

All services will be containerized and orchestrated via Docker Compose:

- FastAPI application (custom image)
- Ollama server with a custom model
- ChromaDB for vector storage
- MongoDB for user profiles and logging
- Mongo Express (optional) for MongoDB GUI

2. API Endpoints

- POST /chat: Send a question to the agent (in Hebrew)
- GET /user-profile: Fetch user's pregnancy profile
- PATCH /user-profile: Update user data (e.g., pregnancy week, LMP, personal preferences)
- GET /tasks: Retrieve recommended medical tasks based on week and history
- POST /tasks/complete: Mark a task as completed
- POST /agent/plan: Trigger the agent to proactively analyze user data and suggest follow-ups
- POST /medical-documents: Upload medical documents (PDFs)
- POST /query: Ask document-specific questions (RAG)

3. Agent Modules

- MemoryManager: Track and store user conversations
- ActionPlanner: Suggest next steps, follow-ups, reminders
- TimelineManager: Track pregnancy week, adjust recommendations
- UserProfile: Manage and store personal data
- ChatRouter: Route requests between RAG, profile logic, and planner

4. Medical Document Processing

Uploaded PDFs (e.g., blood tests, ultrasounds) are processed and stored in ChromaDB with metadata. The agent will extract summaries and recommend next actions based on abnormal results.

5. Logging

MongoDB will store full logs including:
- Timestamp
- User ID
- Conversation history
- Uploaded documents
- Planned tasks and suggestions

6. Swagger/OpenAPI Support

Swagger UI will be available at /docs for full testing of all endpoints and schema validation.

File Structure

project_root/
??? docker-compose.yml
??? Dockerfile
??? modelfile/
?   ??? Modelfile
??? app/
?   ??? main.py
?   ??? api/
?   ?   ??? chat.py
?   ?   ??? user.py
?   ?   ??? tasks.py
?   ?   ??? medical.py
?   ?   ??? swagger.py
?   ??? agent/
?   ?   ??? memory_manager.py
?   ?   ??? action_planner.py
?   ?   ??? timeline.py
?   ?   ??? user_profile.py
?   ?   ??? chat_router.py
?   ??? rag/
?   ??? database/
?   ?   ??? mongo_client.py
?   ?   ??? chroma_client.py
?   ??? utils/
?   ?   ??? pdf_processor.py
?   ?   ??? embeddings.py
??? requirements.txt
??? README.md

